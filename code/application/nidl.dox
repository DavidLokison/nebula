/**
@page NebulaIDL Nebula IDL

The Nebula IDL uses JSON but also supports comments using `//`.

@section NIDL file schema:

1. @ref NIDLNamespace Namespace
2. @ref NIDLIncludes Includes
3. @ref NIDLDependencies Dependencies
4. @ref NIDLEnumeratedTypes Enumerated Types
5. @ref NIDLProperties Properties

@subsection NIDLNamespace Namespace

@code{.json}
"namespace": "GraphicsFeature"
@endcode

Denotes the namespace for this NIDL file.

Generated types will use this namespace.

@subsection NIDLIncludes Includes

@code{.json}
"includes": [
    "math/mat4.h"
    "math/vec4.h"
]
@endcode

Includes any header specified within the generated files.

@subsection NIDLDependencies Dependencies

@code{.json}
"dependencies": [
    "scripting/attributes.nidl"
    "graphics/graphicsattr.nidl"
]
@endcode

Every dependency declared will have its content exposed to this file.

Dependencies are generated first.

@subsection NIDLEnumeratedTypes Enumerated types

@code{.json}
"enums": {
    "GraphicsSettings": {
        "LOW": 0
        "MEDIUM": 1
        "HIGH": 2
    }
}
@endcode

Declares enumerated types. These can be used as types within properties.

@bug    When used as types in properties, the namespace has to be prepended: "Namespace::EnumType".

@subsection NIDLProperties Properties

@code{.json}
"properties": {
    "Health": "float",
    "Stats": {
        "Strength": "float",
        "IQ": "int",
        "isLarge": {
            "_type_": "bool",
            "_default_": false
        }
    },
    "Target": {
        "_type_": "Game::Entity",
        "_default_": -1,
        "_desc_": "Target entity to attack."
    },
    "Movable": "_flag_"
}
@endcode

@subsubsection NIDLPropertiesLayout Layout

- typedef property
@code{.js}
NAME: Type
@endcode

- POD struct property:
@code{.js}
NAME: {
    fieldName: Type,
    fieldName: Type,
}
@endcode

`Type` can either be:
    - A string or object that declares the type or struct
    - A object that contains either:
        - Special fields
            - "_type_": A string or object that declares the type or struct
            - "_default_": A default value
            - "_desc_": A string comment that describes the property
        - or multiple `Type`s, denoting a struct type.

Properties are compiled into C++ structs that can be serialized and deserialized easily. Properties can be added to categories and used to store entities states.

Built in scalar-types are:

- 8 bit: `byte`, `bool`
- 16 bit: `short`, `ushort`
- 32 bit: `int`, `uint`, `float`
- 64 bit: `int64`, `uint64`, `double`

Built in non-scalar types are:

- `vec2` - 2D vector of 32-bit floats.
- `vec3` - 3D vector of 32-bit floats*.
    - * Uses 4x32 bits of memory because of SIMD reasons, only 3 components are usable however).
- `vec4` - 4D vector of 32-bit floats.
- `vector` - 4D vector of 32-bit floats*.
    - w value (4th) is always 0. Useful for normals and directional vectors.
- `point` - 4D vector of 32-bit floats.
    - w value (4th) is always 1. Denotes points in 3d space.
- `mat4` - 4x4 matrix of 32-bit floats.
- `quat` - A quaternion with 32-bit floats.
- `resource` - A path to a resource.

Additional types are:

- `Enumerated type` - Any enumerated type defined in a NIDL file can be used as type.
- `C++ type`
    - Any included C++ headers types can be used as type. Note that C++ type must be trivially destructible and trivially copyable.
    - It is required that the type includes its namespace.

The `_default_` value can be specified as:

| type          | value                            |
| ------------- | --------------------------------:|
| Integers      | `10`                             |
| Floats        | `3.0`                            |
| vec2          | `[1.0, 0.2]`                     |
| vec4          | `[1.3, 20.0, 3.12, 4.0]`         |
| vector        | `[1.0, 2.0, 3.0]`                |
| point         | `[1.0, 2.0, 3.0]`                |
| quat          | `[0.0, 0.0, 0.0, 1.0]`           |
| mat4          | `[1,0,0,0,0,1,...]` (16 floats)  |
| resource      | `"mdl:system/placeholder.n3"`    |
| Enum Type     | Integer or String                |

*/
